server.port=8080
spring.kafka.producer.bootstrap-servers=${KAFKA_BOOTSTRAP}
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.ssl.trust-store-location=file:kafka.client.truststore.jks
spring.kafka.producer.ssl.protocol=SSL
spring.kafka.properties.security.protocol=SSL
data.ingestion.producer.topic=${KAFKA_TOPIC}
management.endpoints.web.exposure.include=info,health,prometheus,metrics

spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.bootstrap-servers=${KAFKA_BOOTSTRAP}
spring.kafka.consumer.enable-auto-commit=false
spring.kafka.consumer.group-id=${KAFKA_GROUP_ID}
spring.kafka.consumer.max-poll-records=${MAX_POOL_RECORDS:1}
spring.kafka.consumer.fetch-max-wait=30000
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.listener.ack-mode=MANUAL_IMEDIATE
spring.kafka.listener.concurrency=${KAFKA_CONCURRENCY:10}
data.ingestion.consumer.topic=${KAFKA_TOPIC:load-generate}
spring.kafka.consumer.ssl.protocol=SSL
spring.kafka.consumer.ssl.truststore-location=file:kafka.client.truststore.jks

logging.dir=logs
logging.filename=application.log